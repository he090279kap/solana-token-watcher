import requests
import schedule
import time
import logging
from telegram import Bot
from config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN)

# API-–∞–¥—Ä–µ—Å–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Solana, Ethereum, BSC
DEX_SCREENER_URLS = {
    "Solana": "https://api.dexscreener.com/latest/dex/tokens/solana",
    "Ethereum": "https://api.dexscreener.com/latest/dex/tokens/ethereum",
    "BSC": "https://api.dexscreener.com/latest/dex/tokens/bsc"
}

# –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
MARKET_CAP_THRESHOLD = 10_000_000  # $10M
VOLUME_THRESHOLD = 50_000_000  # $50M

def get_tokens(network):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å–µ—Ç–∏."""
    url = DEX_SCREENER_URLS.get(network)
    if not url:
        logging.error(f"‚ö† –°–µ—Ç—å {network} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
        return []

    try:
        response = requests.get(url)
        if response.status_code == 200:
            return response.json().get("pairs", [])
        else:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ API ({network}): {response.status_code}")
            return []
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API ({network}): {e}")
        return []

def check_tokens():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã –≤–æ –≤—Å–µ—Ö —Å–µ—Ç—è—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram."""
    for network in DEX_SCREENER_URLS.keys():
        logging.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω—ã –≤ —Å–µ—Ç–∏ {network}...")
        tokens = get_tokens(network)

        for token in tokens:
            name = token.get("baseToken", {}).get("name", "Unknown")
            symbol = token.get("baseToken", {}).get("symbol", "???")
            market_cap = token.get("fdv", 0)  # Fully Diluted Valuation (–∞–Ω–∞–ª–æ–≥ market_cap)
            volume_24h = token.get("volume", {}).get("h24", 0)
            token_address = token.get("pairAddress", "unknown")

            if market_cap >= MARKET_CAP_THRESHOLD and volume_24h >= VOLUME_THRESHOLD:
                message = (
                    f"üöÄ –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–æ–≤ ({network})!\n"
                    f"üîπ –ù–∞–∑–≤–∞–Ω–∏–µ: {name} ({symbol})\n"
                    f"üí∞ –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: ${market_cap:,.0f}\n"
                    f"üìà –û–±—ä—ë–º —Ç–æ—Ä–≥–æ–≤ 24—á: ${volume_24h:,.0f}\n"
                    f"üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://dexscreener.com/{network.lower()}/{token_address}"
                )
                send_telegram_alert(message)

def send_telegram_alert(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram."""
    try:
        bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=message)
        logging.info("üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç
schedule.every(5).minutes.do(check_tokens)

if __name__ == "__main__":
    logging.info("üéØ –ó–∞–ø—É—Å–∫ AI-–ê–≥–µ–Ω—Ç–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç–æ–∫–µ–Ω–æ–≤ Solana, Ethereum, BSC...")
    while True:
        schedule.run_pending()
        time.sleep(60)
